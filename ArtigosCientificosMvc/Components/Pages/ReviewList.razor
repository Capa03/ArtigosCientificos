@page "/review-list"
@using ArtigosCientificosMvc.Models.Review
@using ArtigosCientificosMvc.Service.Review
@using Microsoft.AspNetCore.Mvc
@inject IReviewService ReviewService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Review List</PageTitle>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

<div class="container">
    <!-- PENDING Reviews -->
    <div class="card mb-3">
        <div class="card-header bg-warning text-white">
            <h5 class="mb-0">PENDING</h5>
        </div>
        <div class="card-body">
            @if (Pending != null && Pending.Any())
            {
                <ul class="list-group">
                    @foreach (var review in Pending)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>@review.Title</div>
                            <div>
                                <span class="badge bg-warning">@review.Status</span>
                                <Button class="btn btn-success btn-sm ms-2" @onclick="() => goToReview(review.ReviewId)">Review</Button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No pending reviews.</p>
            }
        </div>
    </div>

    <!-- ACCEPTED Reviews -->
    <div class="card mb-3">
        <div class="card-header bg-success text-white">
            <h5 class="mb-0">ACCEPTED</h5>
        </div>
        <div class="card-body">
            @if (Accepted != null && Accepted.Any())
            {
                <ul class="list-group">
                    @foreach (var review in Accepted)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>@review.Title</div>
                            <div>
                                <span class="badge bg-success">@review.Status</span>
                                <Button class="btn btn-warning btn-sm ms-2" @onclick="() => goToReview(review.ReviewId)">Edit Review</Button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No accepted reviews.</p>
            }
        </div>
    </div>

    <!-- REJECTED Reviews -->
    <div class="card mb-3">
        <div class="card-header bg-danger text-white">
            <h5 class="mb-0">REJECTED</h5>
        </div>
        <div class="card-body">
            @if (Rejected != null && Rejected.Any())
            {
                <ul class="list-group">
                    @foreach (var review in Rejected)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <div>@review.Title</div>
                            <div>
                                <span class="badge bg-danger">@review.Status</span>
                                <Button class="btn btn-warning btn-sm ms-2" @onclick="() => goToReview(review.ReviewId)">Edit Review</Button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No rejected reviews.</p>
            }
        </div>
    </div>
</div>

@code {
    private List<ReviewWithArticleDTO> Pending { get; set; }
    private List<ReviewWithArticleDTO> Accepted { get; set; }
    private List<ReviewWithArticleDTO> Rejected { get; set; }
    private string ErrorMessage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadReviews();
            StateHasChanged();
        }
    }

    void goToReview(int id)
    {
        NavigationManager.NavigateTo($"/review/{id}");
    }

    private async Task LoadReviews()
    {
        try
        {
            ErrorMessage = null;

            Pending = await FetchReviewsByStatus("PENDING");
            Accepted = await FetchReviewsByStatus("ACCEPTED");
            Rejected = await FetchReviewsByStatus("REJECTED");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load reviews: {ex.Message}";
        }
    }

    private async Task<List<ReviewWithArticleDTO>> FetchReviewsByStatus(string status)
    {
        try
        {
            List<ReviewWithArticleDTO> result = await ReviewService.GetAllReviewsByStatus(status);
            return result;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error fetching reviews with status '{status}': {ex.Message}";
            return new List<ReviewWithArticleDTO>();
        }
    }
}
