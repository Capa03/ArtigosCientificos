@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container mt-4">
    <h3 class="text-primary">Submit Article</h3>
    <div class="card shadow p-4">
        <div class="mb-3">
            <label for="fileInput" class="form-label">Select a PDF file to upload:</label>
            <InputFile id="fileInput" OnChange="HandleFileSelected" class="form-control" />
        </div>

        @if (selectedFileName != null)
        {
            <div class="mt-3">
                <p><strong>Selected File:</strong> @selectedFileName</p>
                <p><strong>File Size:</strong> @selectedFileSize KB</p>
                <button class="btn btn-primary" @onclick="UploadFile" disabled="@uploading">Confirm Upload</button>
            </div>
        }

        <div>
            @if (uploading)
            {
                <div class="mb-3 mt-3">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: @progress%;"></div>
                    </div>
                    <small>Uploading... (@progress%)</small>
                </div>
            }
        </div>

        <p class="mt-3">
            <span class="text-success" style="display: @(successMessage != null ? "block" : "none")">@successMessage</span>
            <span class="text-danger" style="display: @(errorMessage != null ? "block" : "none")">@errorMessage</span>
        </p>
    </div>
</div>

@code {
    private string selectedFileName = null;
    private long selectedFileSize = 0;
    private IBrowserFile selectedFile = null;
    private string successMessage = null;
    private string errorMessage = null;
    private bool uploading = false;
    private int progress = 0;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && file.ContentType == "application/pdf")
        {
            selectedFile = file;
            selectedFileName = file.Name;
            selectedFileSize = file.Size / 1024; // Convert to KB
            successMessage = null;
            errorMessage = null;
        }
        else
        {
            errorMessage = "Only PDF files are allowed.";
            selectedFile = null;
            selectedFileName = null;
        }
    }

    private async Task UploadFile()
    {
        if (selectedFile == null)
        {
            errorMessage = "No file selected for upload.";
            return;
        }

        try
        {
            successMessage = null;
            errorMessage = null;
            uploading = true;
            progress = 0;

            using var content = new MultipartFormDataContent();
            using var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFileName);

            // Simulate progress updates
            for (int i = 1; i <= 100; i += 10)
            {
                await Task.Delay(100);
                progress = i;
            }

            var response = await Http.PostAsync("https://localhost:7267/api/File/upload", content);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "File uploaded successfully!";
                selectedFile = null;
                selectedFileName = null;
                selectedFileSize = 0;
            }
            else
            {
                errorMessage = "Failed to upload file. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            uploading = false;
        }
    }
}
