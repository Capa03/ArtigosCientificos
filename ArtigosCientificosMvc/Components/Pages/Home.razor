@page "/Home"
@using ArtigosCientificosMvc.Models.Article
@using ArtigosCientificosMvc.Models.User
@using ArtigosCientificosMvc.Service.Home
@inject IHomeService homeService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1 class="text-center text-2xl font-semibold my-4">Published Articles</h1>

@if (isLoading)
{
    <div class="flex justify-center items-center">
        <div class="spinner-border text-blue-500" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else if (articles == null || articles.Count == 0)
{
    <div class="text-center">
        <p class="text-gray-500">No articles available.</p>
    </div>
}
else
{
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-4">
        @foreach (var article in articles)
        {
            <div class="max-w-xs mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
                <div class="p-4">
                    <h2 class="text-xl font-bold text-blue-600 truncate">@article.Title</h2>
                    <p class="text-gray-700 mt-2">@article.Abstract</p>
                    <div class="mt-4 text-sm text-gray-500">
                        <p>Keywords: @article.Keywords</p>
                    </div>
                    <div class="mt-4">
                        <a href="#" class="text-blue-500 hover:underline">Read more</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code{
    private List<Article> articles;
    private bool isLoading = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            articles = await homeService.getArticles();
            isLoading = false;
            StateHasChanged();
        }

    }
}
