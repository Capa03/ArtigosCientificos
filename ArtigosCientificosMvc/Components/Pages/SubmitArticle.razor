@page "/submitarticle"
@using ArtigosCientificosMvc.Models.Article
@using ArtigosCientificosMvc.Models.User
@using ArtigosCientificosMvc.Service.Articles
@using ArtigosCientificosMvc.Service.Token
@inject IArticleService articleService
@inject NavigationManager Navigation
@inject TokenManager tokenManager
@rendermode InteractiveServer

@if (isLoading)
{
	<Skeleton Animation="SkeletonAnimation.Wave">
		<SkeletonItem ColumnSize="ColumnSize.Is7" />
		<SkeletonItem ColumnSize="ColumnSize.Is4" />
		<SkeletonItem ColumnSize="ColumnSize.Is4" />
		<SkeletonItem ColumnSize="ColumnSize.Is6" />
		<SkeletonItem ColumnSize="ColumnSize.Is8" />
	</Skeleton>
}
else if ((role == "Researcher" || role == "ResearcherReviewer"))
{
	<PageTitle>SubmitArticle</PageTitle>

	<div class="container">
		<div class="row justify-content-center mt-5">
			<div class="col-md-6 col-lg-4">
				<div class="card shadow-sm">
					<div class="card-header text-center">
						<h3>Submit Article</h3>
					</div>
					<div class="card-body">
						<EditForm Model="@article" OnValidSubmit="@OnSubmit" FormName="SubmitArticle">
							<DataAnnotationsValidator />

							<div class="form-group">
								<label for="title">Title</label>
								<InputText id="title" class="form-control" @bind-Value="@article.Title" placeholder="Enter Article Title" />
								<ValidationMessage For="@(() => article.Title)" />
							</div>
							<div class="form-group">
								<label for="abstract">Abstract</label>
								<InputText id="abstract" class="form-control" @bind-Value="@article.Abstract" placeholder="Enter Article Abstract" />
								<ValidationMessage For="@(() => article.Abstract)" />
							</div>
							<div class="form-group">
								<label for="keywords">Keywords</label>
								<InputText id="keywords" class="form-control" @bind-Value="@article.Keywords" placeholder="Enter Article Keywords" />
								<ValidationMessage For="@(() => article.Keywords)" />
							</div>
							<FilePickerComponent OnFileSelected="HandleFileSelected" />

							<div class="form-group text-center mt-4">
								<button type="submit" class="btn btn-primary w-100">Submit</button>
							</div>
						</EditForm>
					</div>
				</div>
			</div>
		</div>
		@if (!string.IsNullOrEmpty(ErrorMessage))
		{
			<div class="alert alert-danger mt-4" role="alert">
				@ErrorMessage
			</div>
		}
	</div>
}
else
{
	Navigation.NavigateTo("/unauthorized");
}



@code {
	Article article = new Article();
	string? ErrorMessage { get; set; }
	private bool isLoading = true;
	private string selectedFileName;
	private string role = "";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				User? user = await tokenManager.GetUserAsync();

				if (user?.Role != null)
				{
					if (user.Role.Any(r => r.Name.Equals("Researcher", StringComparison.OrdinalIgnoreCase)) &&
						user.Role.Any(r => r.Name.Equals("Reviewer", StringComparison.OrdinalIgnoreCase)))
					{
						role = "ResearcherReviewer";
						Console.WriteLine("SUBMIT ARTICLE " + role);
					}
					else
					{
						role = "Researcher";
						Console.WriteLine("SUBMIT ARTICLE " + role);
					}

				}
			}
			catch (Exception ex)
			{
				ErrorMessage = $"Error: {ex.Message}";
			}
			finally
			{
				isLoading = false;
				StateHasChanged();
			}
		}
	}

	private void HandleFileSelected(string fileName)
	{
		selectedFileName = fileName;
	}

	async Task OnSubmit()
	{
		ErrorMessage = null;

		if (string.IsNullOrEmpty(selectedFileName))
		{
			ErrorMessage = "Please select a file before submitting.";
			return;
		}

		article.File = selectedFileName;

		ArticleResult articleResult = await articleService.Create(article);

		if (articleResult.Success)
		{
			Navigation.NavigateTo("/Home");
		}
		else
		{
			ErrorMessage = articleResult.Message;
		}
	}

}
